{"version":3,"sources":["DataContext.js","Fetch.js","Keys.js","WeatherData.js","DataDisplay.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","data","setData","Provider","value","children","Fetch","fetchWeather","cityID","state","setState","a","fetch","response","json","weatherData","Promise","resolve","then","console","log","WeatherData","useContext","roundFix","number","precision","multi","Math","pow","round","toFixed","WeatherIcon","weather","main","icon","id","className","description","temp","feels_like","humidity","wind","speed","tzlookup","require","DataDisplay","TimezoneUTC","timezone","DataRender","hasOwnProperty","name","sys","country","format","ticking","coord","lat","lon","Form","selectedCity","setSelectedCity","cityOptions","setcityOptions","cityInputText","setcityInputText","options","Autocomplete","classname","key","CountryList","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","onChange","e","v","CityList","map","result","abbreviation","push","inputValue","onInputChange","marginTop","indexOf","cityChange","Button","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e626f14.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  return (\r\n    <DataContext.Provider value={[data, setData]}>\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import react from \"react\";\r\nimport {WeatherAPIKey} from \"./Keys\";\r\n\r\nexport default class Fetch {\r\n  /*Fetches weather data from the lat and longitute passed to the function, pushes the desired parts of the data to state*/\r\n  static fetchWeather = async (cityID, state, setState) => {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?id=${cityID}&appid=${WeatherAPIKey}`\r\n    );\r\n    let weatherData = await response.json();\r\n    Promise.resolve(weatherData).then(() => {\r\n      console.log(weatherData);\r\n      console.log(\"Função do tempo rodou\");\r\n      setState(weatherData);\r\n    });\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nexport const WeatherAPIKey = \"427d7627c7d080347a72af19766c1f3a\";","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport {\r\n  WiDayThunderstorm,\r\n  WiNightThunderstorm,\r\n  WiDaySprinkle,\r\n  WiNightAltSprinkle,\r\n  WiDayRain,\r\n  WiNightAltRain,\r\n  WiDaySnow,\r\n  WiNightAltSnow,\r\n  WiDayCloudy,\r\n  WiNightAltCloudy,\r\n  WiDaySunny,\r\n  WiNightClear,\r\n} from \"react-icons/wi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nfunction WeatherData() {\r\n  const [data, setData] = useContext(DataContext);\r\n  const [weatherIcon, setWeatherIcon] = useState(0);\r\n\r\n  /*Float formating for temperature display*/\r\n\r\n  function roundFix(number, precision) {\r\n    var multi = Math.pow(10, precision);\r\n    return Math.round((number * multi).toFixed(precision + 1)) / multi;\r\n  }\r\n\r\n  /*Determines the weather icon to display depending on the conditions and time of day provided by the api request */\r\n  function WeatherIcon() {\r\n    if (data.weather[0].main === \"Clear\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySunny id=\"weatherIcon\" />;\r\n      else return <WiNightClear id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Clouds\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayCloudy id=\"weatherIcon\" />;\r\n      else return <WiNightAltCloudy id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Snow\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySnow id=\"weatherIcon\" />;\r\n      else return <WiNightAltSnow id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Rain\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayRain id=\"weatherIcon\" />;\r\n      else return <WiNightAltRain id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Drizzle\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySprinkle id=\"weatherIcon\" />;\r\n      else return <WiNightAltSprinkle id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Thunderstorm\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayThunderstorm id=\"weatherIcon\" />;\r\n      else return <WiNightThunderstorm id=\"weatherIcon\" />;\r\n    } else return null;\r\n  }\r\n\r\n  return (\r\n    <div id=\"weatherDisplay\" className=\"infoBlock\">\r\n      <div id=\"weatherIconDescription\">\r\n      <WeatherIcon />\r\n      <h3 className=\"DataContent\" id=\"weatherDescription\">\r\n        {data.weather[0].description}\r\n      </h3>\r\n      </div>\r\n      <h3 className=\"DataContent\">\r\n        Temperature: {roundFix(data.main.temp - 273.15, 1)}℃\r\n      </h3>\r\n      <h3 className=\"DataContent\">\r\n        Feels like: {roundFix(data.main.feels_like - 273.15, 1)}℃\r\n      </h3>\r\n      <h3 className=\"DataContent\">Humidity: {data.main.humidity}%</h3>\r\n      <h3 className=\"DataContent\">Wind speed: {data.wind.speed} Meter/sec</h3>\r\n    </div>\r\n  );\r\n}\r\nexport default WeatherData;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Fetch from \"./Fetch.js\";\r\nimport WeatherData from \"./WeatherData.js\";\r\nimport Clock from \"react-live-clock\";\r\nvar tzlookup = require(\"tz-lookup\");\r\n\r\nfunction DataDisplay() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Converts timezone result from the API to UTC*/\r\n  const TimezoneUTC = () => {\r\n    var timezone = data.timezone / 60 / 60;\r\n    var timezoneReturn;\r\n    if (data.timezone >= 0) timezoneReturn = \"UTC + \" + timezone;\r\n    else timezoneReturn = \"UTC \" + timezone;\r\n    return timezoneReturn;\r\n  };\r\n\r\n  /*Displays the data state only if not empty*/\r\n  const DataRender = () => {\r\n    return data.hasOwnProperty(\"name\") ? (\r\n      <div>\r\n        <h3 className=\"DataCity\">\r\n          {data.name} , {data.sys.country}\r\n        </h3>\r\n        <div id=\"DataContainer\">\r\n          <div id=\"localInfoContainer\" className=\"infoBlock\">\r\n            <div className=\"localTime\">\r\n              <h3>Local time:</h3>\r\n              <Clock\r\n                className=\"liveClock\"\r\n                format={\"HH:mm:ss\"}\r\n                ticking={true}\r\n                timezone={tzlookup(data.coord.lat, data.coord.lon)}\r\n              />\r\n            </div>\r\n            <h3 className=\"DataContent\">\r\n              Timezone: ({tzlookup(data.coord.lat, data.coord.lon)})\r\n            </h3>\r\n            <div className=\"DataContent\">\r\n              <TimezoneUTC />\r\n            </div>\r\n          </div>\r\n\r\n          <WeatherData />\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  return <DataRender />;\r\n}\r\nexport default DataDisplay;","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Fetch from \"./Fetch.js\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CityList from \"./city.list.min\";\r\nimport CountryList from \"./countries\";\r\n\r\nfunction Form() {\r\n  const [data, setData] = useContext(DataContext);\r\n  const [selectedCity, setSelectedCity] = useState(0);\r\n  const [cityOptions, setcityOptions] = useState([]);\r\n  const [cityInputText, setcityInputText] = useState(\"\");\r\n\r\n  let options = [];\r\n  function setOptions(country) {\r\n    setcityInputText(\"\");\r\n    setcityOptions([]);\r\n\r\n    if (country != null) {\r\n      CityList.map((result) =>\r\n        result.country === country.abbreviation ? options.push(result) : null\r\n      );\r\n      setcityOptions(options);\r\n      console.log(options);\r\n    }\r\n  }\r\n\r\n  function cityChange(v) {\r\n    /*Checks if the input is not empty before changing states to avoid errors*/\r\n    if (cityOptions.indexOf(v) !== -1) {\r\n      setcityInputText(v.name);\r\n      setSelectedCity(v);\r\n    }\r\n  }\r\n\r\n  function runFetch() {\r\n    if (selectedCity !== 0) Fetch.fetchWeather(selectedCity.id, data, setData);\r\n    setcityInputText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"formContainer\">\r\n      <form>\r\n        <Autocomplete\r\n          classname=\"autocomplete\"\r\n          key={\"countries\"}\r\n          id=\"countryList\"\r\n          options={CountryList}\r\n          getOptionLabel={(option) => option.country}\r\n          style={{ width: 300 }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n          )}\r\n          onChange={(e, v) => setOptions(v)}\r\n        />\r\n        <Autocomplete\r\n          classname=\"autocomplete\"\r\n          inputValue={cityInputText}\r\n          onInputChange={(e, v) => setcityInputText(v)}\r\n          key={\"cities\"}\r\n          id=\"cityList\"\r\n          options={cityOptions}\r\n          getOptionLabel={(option) => option.name}\r\n          style={{\r\n            width: 300,\r\n            marginTop: 30,\r\n            \r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n          )}\r\n          onChange={(e, v) => cityChange(v)}\r\n        />\r\n      </form>\r\n      <Button\r\n        id=\"runBtn\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => runFetch()}\r\n      >\r\n        Get local info!\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { DataProvider } from \"./DataContext\";\nimport DataDisplay from \"./DataDisplay.js\";\nimport Form from \"./Form\";\nfunction App() {\n  const data = useState(\"\");\n\n  return (\n    <DataProvider>\n      <div className=\"App\">\n        <Form />\n        <DataDisplay />\n      </div>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}