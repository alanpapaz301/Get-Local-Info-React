{"version":3,"sources":["DataContext.js","Fetch.js","Keys.js","components/WeatherIcon.js","components/WeatherDetails.js","components/Wind.js","components/TimeDisplay.js","components/Humidity.js","components/Timezone.js","DataDisplay.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","data","setData","Provider","value","children","Fetch","fetchWeather","cityID","state","setState","a","fetch","response","json","weatherData","Promise","resolve","then","console","log","WeatherIcon","useContext","Icon","weather","main","icon","id","className","description","WeatherDetails","roundFix","number","precision","multi","Math","pow","round","toFixed","temp","feels_like","Wind","wind","speed","tzlookup","require","TimeDisplay","format","ticking","timezone","coord","lat","lon","Humidity","humidity","text","Timezone","TimezoneUTC","timezoneReturn","DataDisplay","DataRender","hasOwnProperty","name","sys","country","Form","selectedCity","setSelectedCity","cityOptions","setcityOptions","cityInputText","setcityInputText","options","Autocomplete","classname","key","CountryList","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","onChange","e","v","CityList","map","result","abbreviation","push","inputValue","onInputChange","indexOf","cityChange","Button","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0d55a07.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  return (\r\n    <DataContext.Provider value={[data, setData]}>\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import react from \"react\";\r\nimport {WeatherAPIKey} from \"./Keys\";\r\n\r\nexport default class Fetch {\r\n  /*Fetches weather data from the lat and longitute passed to the function, pushes the desired parts of the data to state*/\r\n  static fetchWeather = async (cityID, state, setState) => {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?id=${cityID}&appid=${WeatherAPIKey}`\r\n    );\r\n    let weatherData = await response.json();\r\n    Promise.resolve(weatherData).then(() => {\r\n      console.log(weatherData);\r\n      console.log(\"Função do tempo rodou\");\r\n      setState(weatherData);\r\n    });\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nexport const WeatherAPIKey = \"427d7627c7d080347a72af19766c1f3a\";","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport {\r\n  WiDayThunderstorm,\r\n  WiNightThunderstorm,\r\n  WiDaySprinkle,\r\n  WiNightAltSprinkle,\r\n  WiDayRain,\r\n  WiNightAltRain,\r\n  WiDaySnow,\r\n  WiNightAltSnow,\r\n  WiDayCloudy,\r\n  WiNightAltCloudy,\r\n  WiDaySunny,\r\n  WiNightClear,\r\n} from \"react-icons/wi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nfunction WeatherIcon() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Determines the weather icon to display depending on the conditions and time of day provided by the api request */\r\n  const Icon = () => {\r\n    if (data.weather[0].main === \"Clear\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySunny id=\"weatherIcon\" />;\r\n      else return <WiNightClear id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Clouds\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayCloudy id=\"weatherIcon\" />;\r\n      else return <WiNightAltCloudy id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Snow\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySnow id=\"weatherIcon\" />;\r\n      else return <WiNightAltSnow id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Rain\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayRain id=\"weatherIcon\" />;\r\n      else return <WiNightAltRain id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Drizzle\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDaySprinkle id=\"weatherIcon\" />;\r\n      else return <WiNightAltSprinkle id=\"weatherIcon\" />;\r\n    } else if (data.weather[0].main === \"Thunderstorm\") {\r\n      if (data.weather[0].icon[2] === \"d\")\r\n        return <WiDayThunderstorm id=\"weatherIcon\" />;\r\n      else return <WiNightThunderstorm id=\"weatherIcon\" />;\r\n    } else return null;\r\n  };\r\n  return (\r\n    <div className=\"infoBlock\" id=\"weatherIconDescription\" >\r\n      <Icon />\r\n      <h1 className=\"blockTitle\">\r\n        {data.weather[0].description}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherIcon;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\n\r\nfunction WeatherDetails() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Float formating for temperature display*/\r\n\r\n  function roundFix(number, precision) {\r\n    var multi = Math.pow(10, precision);\r\n    return Math.round((number * multi).toFixed(precision + 1)) / multi;\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"weatherDisplay\" className=\"infoBlock\">\r\n      <h1 className=\"blockTitle\">\r\n        Temperature:\r\n      </h1>\r\n      <h1 className=\"dataContent\">\r\n        {roundFix(data.main.temp - 273.15, 1)}℃\r\n      </h1>\r\n      <h1 className=\"blockTitle\">\r\n        Feels like: \r\n      </h1>\r\n      <h1 className=\"dataContent\">\r\n        {roundFix(data.main.feels_like - 273.15, 1)}℃\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\nexport default WeatherDetails;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\n\r\nfunction Wind() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n\r\n    return (\r\n      <div id=\"windContainer\" className=\"infoBlock\">\r\n        <h1 className=\"blockTitle\">\r\n          Wind Speed:\r\n        </h1>\r\n        <h3 className=\"dataContent\">{data.wind.speed} Meter/sec</h3>\r\n          \r\n      </div>\r\n    );\r\n  }\r\n  export default Wind;","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport Clock from \"react-live-clock\";\r\nvar tzlookup = require(\"tz-lookup\");\r\n\r\nfunction TimeDisplay() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Converts timezone result from the API to UTC*/\r\n  const TimezoneUTC = () => {\r\n    var timezone = data.timezone / 60 / 60;\r\n    var timezoneReturn;\r\n    if (data.timezone >= 0) timezoneReturn = \"UTC + \" + timezone;\r\n    else timezoneReturn = \"UTC \" + timezone;\r\n    return timezoneReturn;\r\n  };\r\n\r\n    return (\r\n      <div id=\"timeContainer\" className=\"infoBlock\">\r\n          <h1 className=\"blockTitle\">Local time</h1>\r\n          <Clock\r\n            className=\"dataContent\"\r\n            format={\"HH:mm:ss\"}\r\n            ticking={true}\r\n            timezone={tzlookup(data.coord.lat, data.coord.lon)}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n  export default TimeDisplay;","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nfunction Humidity() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Float formating for temperature display*/\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"humidityDisplay\" className=\"infoBlock\"> \r\n    <h1 className=\"blockTitle\" id=\"humidityTitle\">Humidity</h1>\r\n    <CircularProgressbar id=\"humidityBar\" value={data.main.humidity} text={`${data.main.humidity}%`}/>\r\n    </div>\r\n  );\r\n}\r\nexport default  Humidity;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\nvar tzlookup = require(\"tz-lookup\");\r\n\r\nfunction Timezone() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Converts timezone result from the API to UTC*/\r\n  const TimezoneUTC = () => {\r\n    var timezone = data.timezone / 60 / 60;\r\n    var timezoneReturn;\r\n    if (data.timezone >= 0) timezoneReturn = \"UTC + \" + timezone\r\n    else timezoneReturn = \"UTC \" + timezone\r\n    return (\r\n    <div className=\"dataContent\">\r\n        {timezoneReturn}\r\n    </div>\r\n    )\r\n  };\r\n\r\n    return (\r\n      <div id=\"timezoneContainer\" className=\"infoBlock\">\r\n        <h1 className=\"blockTitle\">\r\n          Timezone \r\n        </h1>\r\n        <h3 className=\"dataContent\" id=\"timezoneName\">({tzlookup(data.coord.lat, data.coord.lon)})</h3>\r\n          <TimezoneUTC />\r\n      </div>\r\n    );\r\n  }\r\n  export default Timezone;","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Fetch from \"./Fetch.js\";\r\nimport WeatherIcon from \"./components/WeatherIcon.js\";\r\nimport WeatherDetails from \"./components/WeatherDetails.js\";\r\nimport Wind from \"./components/Wind\";\r\nimport TimeDisplay from \"./components/TimeDisplay\";\r\nimport Humidity from \"./components/Humidity\";\r\nimport Timezone from \"./components/Timezone\";\r\n\r\nfunction DataDisplay() {\r\n  const [data, setData] = useContext(DataContext);\r\n\r\n  /*Displays the data state only if not empty*/\r\n  const DataRender = () => {\r\n    return data.hasOwnProperty(\"name\") ? (\r\n      <div id=\"containerBackground\">\r\n        <h1 className=\"cityName\">\r\n          {data.name} , {data.sys.country}\r\n        </h1>\r\n\r\n        <div id=\"displayContainer\">\r\n          <WeatherIcon />\r\n          <WeatherDetails />\r\n          <Humidity />\r\n          <Wind />\r\n          <TimeDisplay />\r\n          <Timezone />\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  return <DataRender />;\r\n}\r\nexport default DataDisplay;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport Fetch from \"../Fetch.js\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CityList from \"../city.list.min\";\r\nimport CountryList from \"../countries\";\r\n\r\nfunction Form() {\r\n  const [data, setData] = useContext(DataContext);\r\n  const [selectedCity, setSelectedCity] = useState(0);\r\n  const [cityOptions, setcityOptions] = useState([]);\r\n  const [cityInputText, setcityInputText] = useState(\"\");\r\n\r\n  let options = [];\r\n  function setOptions(country) {\r\n    setcityInputText(\"\");\r\n    setcityOptions([]);\r\n\r\n    if (country != null) {\r\n      CityList.map((result) =>\r\n        result.country === country.abbreviation ? options.push(result) : null\r\n      );\r\n      setcityOptions(options);\r\n      console.log(options);\r\n    }\r\n  }\r\n\r\n  function cityChange(v) {\r\n    /*Checks if the input is not empty before changing states to avoid errors*/\r\n    if (cityOptions.indexOf(v) !== -1) {\r\n      setcityInputText(v.name);\r\n      setSelectedCity(v);\r\n    }\r\n  }\r\n\r\n  function runFetch() {\r\n    if (selectedCity !== 0) Fetch.fetchWeather(selectedCity.id, data, setData);\r\n    setcityInputText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"formContainer\">\r\n      <form>\r\n        <Autocomplete\r\n          classname=\"autocomplete\"\r\n          key={\"countries\"}\r\n          id=\"countryList\"\r\n          options={CountryList}\r\n          getOptionLabel={(option) => option.country}\r\n          style={{ width: 300 }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n          )}\r\n          onChange={(e, v) => setOptions(v)}\r\n        />\r\n        <Autocomplete\r\n          classname=\"autocomplete\"\r\n          inputValue={cityInputText}\r\n          onInputChange={(e, v) => setcityInputText(v)}\r\n          key={\"cities\"}\r\n          id=\"cityList\"\r\n          options={cityOptions}\r\n          getOptionLabel={(option) => option.name}\r\n          style={{\r\n            width: 300\r\n            \r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n          )}\r\n          onChange={(e, v) => cityChange(v)}\r\n        />\r\n      </form>\r\n      <Button\r\n        id=\"runBtn\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => runFetch()}\r\n      >\r\n        Get local info!\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { DataProvider } from \"./DataContext\";\r\nimport DataDisplay from \"./DataDisplay.js\";\r\nimport Form from \"./components/Form\";\r\n\r\nfunction App() {\r\n  const data = useState(\"\");\r\n\r\n  return (\r\n    <DataProvider>\r\n      <div className=\"App\">\r\n        <Form />\r\n        <DataDisplay />\r\n      </div>\r\n    </DataProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}