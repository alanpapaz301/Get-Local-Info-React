{"version":3,"sources":["DataContext.js","Fetch.js","Card.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","data","setData","Provider","value","children","Fetch","fetchWeather","cityID","state","setState","a","fetch","response","json","weatherData","Promise","resolve","then","console","log","concat","tzlookup","require","Card","useContext","ConditionalRender","length","map","item","className","name","sys","country","format","ticking","timezone","coord","lat","lon","main","temp","humidity","id","Form","selectedCity","setSelectedCity","options","Autocomplete","key","CountryList","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","onChange","e","v","CityList","result","abbreviation","push","marginTop","Button","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e501b1c2.chunk.js","sourcesContent":["import React ,{useState,createContext}from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = props => {\r\n  const [data,setData] = useState([]);\r\n\r\n\r\n  return (\r\n\r\n      <DataContext.Provider value={[data,setData]}>\r\n        {props.children}\r\n      </DataContext.Provider>\r\n\r\n    );\r\n  };\r\n","import react from 'react';\r\n\r\n\r\n\r\nexport default class Fetch{\r\n\r\n\r\n\r\n\r\n/*Fetches weather data from the lat and longitute passed to the function, pushes the desired parts of the data to state*/\r\nstatic fetchWeather =  async (cityID,state,setState) => {\r\n\r\n\r\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?id=${cityID}&appid=427d7627c7d080347a72af19766c1f3a`)\r\n  let weatherData = await response.json()\r\n  Promise.resolve(weatherData).then(() => {\r\n    console.log(weatherData);\r\n    console.log(\"Função do tempo rodou\");\r\n      setState(state.concat(weatherData));\r\n\r\n  });\r\n}\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Fetch from './Fetch.js';\r\nimport Clock from 'react-live-clock';\r\nvar tzlookup = require(\"tz-lookup\");\r\n\r\n\r\n\r\nfunction Card(){\r\n\r\nconst [data,setData] = useContext(DataContext);\r\n\r\n\r\n\r\n\r\n{/*Maps the data state only if not empty*/}\r\n  const ConditionalRender = () => {\r\n    return(\r\n      data.length>0 ?\r\n      data.map(item => (\r\n        <div className=\"cardDisplay\">\r\n        <h3>City: {item.name} / {item.sys.country}</h3>\r\n        <Clock className=\"liveClock\" format={'HH:mm:ss'} ticking={true} timezone={tzlookup(item.coord.lat,item.coord.lon)} />\r\n        <h3>Temp {item.main.temp}</h3>\r\n        <h3>Humidity: {item.main.humidity}</h3>\r\n        </div>\r\n      ))\r\n      :\r\n      null\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\nreturn(\r\n  <div id = \"cardContainer\">\r\n\r\n\r\n    <ConditionalRender/>\r\n\r\n  </div>\r\n\r\n\r\n\r\n);\r\n}\r\nexport default Card;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport Fetch from './Fetch.js';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { Button } from '@material-ui/core';\r\nimport CityList  from './city.list.min';\r\nimport CountryList from './countries';\r\n\r\nfunction Form(){\r\n\r\n  const [data,setData] = useContext(DataContext);\r\n  const [selectedCity,setSelectedCity] = useState(0);\r\n  let tempCity = null;\r\n\r\n  let options = [];\r\n\r\n  function setOptions(country){\r\n\r\n    if(country !=null){\r\n\r\n      CityList.map(result => (\r\n        result.country === country.abbreviation?\r\n          options.push(result)\r\n          :\r\n          null\r\n      ))\r\n      console.log(options);\r\n    }\r\n  }\r\n\r\n  function runFetch(){\r\n    if(selectedCity != 0)\r\n    Fetch.fetchWeather(selectedCity.id,data,setData);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return(\r\n    <div id=\"formContainer\">\r\n      <form>\r\n      <Autocomplete\r\n            key={\"countries\"}\r\n            id=\"countryList\"\r\n            options={CountryList}\r\n            getOptionLabel={(option) => option.country}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Country\" variant=\"outlined\" />}\r\n            onChange={(e,v) => setOptions(v)}\r\n      />\r\n      <Autocomplete\r\n                key={\"cities\"}\r\n                id=\"cityList\"\r\n                options={options}\r\n                getOptionLabel={(option) => option.name}\r\n                style={{ width: 300, marginTop:10 }}\r\n                renderInput={(params) => <TextField {...params} label=\"City\" variant=\"outlined\" />}\r\n                onChange={(e,v) => setSelectedCity(v)}\r\n        />\r\n\r\n      </form>\r\n      <Button id=\"runBtn\" variant=\"contained\" color=\"primary\" onClick={() => runFetch() }>\r\n        Run\r\n      </Button>\r\n      </div>\r\n\r\n\r\n\r\n  );\r\n}\r\nexport default Form;\r\n","import React ,{useState}from 'react';\nimport './App.css';\nimport { DataProvider } from \"./DataContext\";\nimport Card from './Card.js';\nimport Form from './Form';\nfunction App() {\n\n  const data = useState(\"\");\n\n\n  return (\n    <DataProvider>\n    <div className=\"App\">\n    <Form/>\n    <Card/>\n    </div>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}